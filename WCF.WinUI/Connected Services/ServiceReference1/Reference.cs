//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF.WinUI.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTOProducts", Namespace="http://schemas.datacontract.org/2004/07/WCF.DTO.Data")]
    [System.SerializableAttribute()]
    public partial class DTOProducts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> DiscontinuedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityPerUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> ReorderLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SupplierIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> UnitPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> UnitsInStockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> UnitsOnOrderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Discontinued {
            get {
                return this.DiscontinuedField;
            }
            set {
                if ((this.DiscontinuedField.Equals(value) != true)) {
                    this.DiscontinuedField = value;
                    this.RaisePropertyChanged("Discontinued");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((this.ProductIdField.Equals(value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityPerUnit {
            get {
                return this.QuantityPerUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityPerUnitField, value) != true)) {
                    this.QuantityPerUnitField = value;
                    this.RaisePropertyChanged("QuantityPerUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> ReorderLevel {
            get {
                return this.ReorderLevelField;
            }
            set {
                if ((this.ReorderLevelField.Equals(value) != true)) {
                    this.ReorderLevelField = value;
                    this.RaisePropertyChanged("ReorderLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SupplierId {
            get {
                return this.SupplierIdField;
            }
            set {
                if ((this.SupplierIdField.Equals(value) != true)) {
                    this.SupplierIdField = value;
                    this.RaisePropertyChanged("SupplierId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> UnitsInStock {
            get {
                return this.UnitsInStockField;
            }
            set {
                if ((this.UnitsInStockField.Equals(value) != true)) {
                    this.UnitsInStockField = value;
                    this.RaisePropertyChanged("UnitsInStock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> UnitsOnOrder {
            get {
                return this.UnitsOnOrderField;
            }
            set {
                if ((this.UnitsOnOrderField.Equals(value) != true)) {
                    this.UnitsOnOrderField = value;
                    this.RaisePropertyChanged("UnitsOnOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceOf_DTOProducts")]
    public interface IServiceOf_DTOProducts {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_DTOProducts/Add", ReplyAction="http://tempuri.org/IServiceOf_DTOProducts/AddResponse")]
        bool Add(WCF.WinUI.ServiceReference1.DTOProducts entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_DTOProducts/Add", ReplyAction="http://tempuri.org/IServiceOf_DTOProducts/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(WCF.WinUI.ServiceReference1.DTOProducts entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_DTOProducts/Remove", ReplyAction="http://tempuri.org/IServiceOf_DTOProducts/RemoveResponse")]
        bool Remove(WCF.WinUI.ServiceReference1.DTOProducts entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_DTOProducts/Remove", ReplyAction="http://tempuri.org/IServiceOf_DTOProducts/RemoveResponse")]
        System.Threading.Tasks.Task<bool> RemoveAsync(WCF.WinUI.ServiceReference1.DTOProducts entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_DTOProducts/Update", ReplyAction="http://tempuri.org/IServiceOf_DTOProducts/UpdateResponse")]
        bool Update(WCF.WinUI.ServiceReference1.DTOProducts entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_DTOProducts/Update", ReplyAction="http://tempuri.org/IServiceOf_DTOProducts/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(WCF.WinUI.ServiceReference1.DTOProducts entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_DTOProducts/Select", ReplyAction="http://tempuri.org/IServiceOf_DTOProducts/SelectResponse")]
        WCF.WinUI.ServiceReference1.DTOProducts[] Select();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_DTOProducts/Select", ReplyAction="http://tempuri.org/IServiceOf_DTOProducts/SelectResponse")]
        System.Threading.Tasks.Task<WCF.WinUI.ServiceReference1.DTOProducts[]> SelectAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceOf_DTOProductsChannel : WCF.WinUI.ServiceReference1.IServiceOf_DTOProducts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceOf_DTOProductsClient : System.ServiceModel.ClientBase<WCF.WinUI.ServiceReference1.IServiceOf_DTOProducts>, WCF.WinUI.ServiceReference1.IServiceOf_DTOProducts {
        
        public ServiceOf_DTOProductsClient() {
        }
        
        public ServiceOf_DTOProductsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceOf_DTOProductsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceOf_DTOProductsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceOf_DTOProductsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Add(WCF.WinUI.ServiceReference1.DTOProducts entity) {
            return base.Channel.Add(entity);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(WCF.WinUI.ServiceReference1.DTOProducts entity) {
            return base.Channel.AddAsync(entity);
        }
        
        public bool Remove(WCF.WinUI.ServiceReference1.DTOProducts entity) {
            return base.Channel.Remove(entity);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAsync(WCF.WinUI.ServiceReference1.DTOProducts entity) {
            return base.Channel.RemoveAsync(entity);
        }
        
        public bool Update(WCF.WinUI.ServiceReference1.DTOProducts entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(WCF.WinUI.ServiceReference1.DTOProducts entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public WCF.WinUI.ServiceReference1.DTOProducts[] Select() {
            return base.Channel.Select();
        }
        
        public System.Threading.Tasks.Task<WCF.WinUI.ServiceReference1.DTOProducts[]> SelectAsync() {
            return base.Channel.SelectAsync();
        }
    }
}
